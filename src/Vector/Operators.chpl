
//
// Autogenerated by generate_ops.py: DO NOT EDIT
//
module Operators {
  use Vector only vector;
  import Intrin;

  /* VECTOR + VECTOR */
  inline operator+(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.add(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR += VECTOR */
  inline operator+=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.add(eltType, numElts, x.data, y.data);
  }

  /* VECTOR + SCALAR */
  inline operator+(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.add(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR += SCALAR */
  inline operator+=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.add(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR + VECTOR */
  inline operator+(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.add(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR - VECTOR */
  inline operator-(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.sub(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR -= VECTOR */
  inline operator-=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.sub(eltType, numElts, x.data, y.data);
  }

  /* VECTOR - SCALAR */
  inline operator-(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.sub(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR -= SCALAR */
  inline operator-=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.sub(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR - VECTOR */
  inline operator-(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.sub(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR * VECTOR */
  inline operator*(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.mul(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR *= VECTOR */
  inline operator*=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.mul(eltType, numElts, x.data, y.data);
  }

  /* VECTOR * SCALAR */
  inline operator*(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.mul(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR *= SCALAR */
  inline operator*=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.mul(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR * VECTOR */
  inline operator*(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.mul(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR / VECTOR */
  inline operator/(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.div(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR /= VECTOR */
  inline operator/=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.div(eltType, numElts, x.data, y.data);
  }

  /* VECTOR / SCALAR */
  inline operator/(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.div(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR /= SCALAR */
  inline operator/=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.div(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR / VECTOR */
  inline operator/(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.div(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* - VECTOR */
  inline operator-(x: vector(?eltType, ?numElts)): x.type {
    var result: x.type;
    result.data = Intrin.neg(eltType, numElts, x.data);
    return result;
  }

  /* VECTOR & VECTOR */
  inline operator&(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.and(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR &= VECTOR */
  inline operator&=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.and(eltType, numElts, x.data, y.data);
  }

  /* VECTOR & SCALAR */
  inline operator&(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.and(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR &= SCALAR */
  inline operator&=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.and(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR & VECTOR */
  inline operator&(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.and(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR | VECTOR */
  inline operator|(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.or(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR |= VECTOR */
  inline operator|=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.or(eltType, numElts, x.data, y.data);
  }

  /* VECTOR | SCALAR */
  inline operator|(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.or(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR |= SCALAR */
  inline operator|=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.or(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR | VECTOR */
  inline operator|(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.or(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR ^ VECTOR */
  inline operator^(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.xor(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR ^= VECTOR */
  inline operator^=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    x.data = Intrin.xor(eltType, numElts, x.data, y.data);
  }

  /* VECTOR ^ SCALAR */
  inline operator^(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.xor(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* VECTOR ^= SCALAR */
  inline operator^=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    x.data = Intrin.xor(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
  }

  /* SCALAR ^ VECTOR */
  inline operator^(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.xor(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* ~ VECTOR */
  inline operator~(x: vector(?eltType, ?numElts)): x.type {
    var result: x.type;
    result.data = Intrin.not(eltType, numElts, x.data);
    return result;
  }

  /* VECTOR == VECTOR */
  inline operator==(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpEq(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR == SCALAR */
  inline operator==(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpEq(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR == VECTOR */
  inline operator==(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpEq(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR != VECTOR */
  inline operator!=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpNe(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR != SCALAR */
  inline operator!=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpNe(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR != VECTOR */
  inline operator!=(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpNe(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR < VECTOR */
  inline operator<(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpLt(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR < SCALAR */
  inline operator<(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpLt(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR < VECTOR */
  inline operator<(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpLt(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR <= VECTOR */
  inline operator<=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpLe(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR <= SCALAR */
  inline operator<=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpLe(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR <= VECTOR */
  inline operator<=(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpLe(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR > VECTOR */
  inline operator>(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpGt(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR > SCALAR */
  inline operator>(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpGt(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR > VECTOR */
  inline operator>(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpGt(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }

  /* VECTOR >= VECTOR */
  inline operator>=(x: vector(?eltType, ?numElts), y: x.type): x.type {
    var result: x.type;
    result.data = Intrin.cmpGe(eltType, numElts, x.data, y.data);
    return result;
  }

  /* VECTOR >= SCALAR */
  inline operator>=(x: vector(?eltType, ?numElts), y: ?scalarType): x.type
    where isCoercible(scalarType, eltType) {
    var result: x.type;
    result.data = Intrin.cmpGe(eltType, numElts, x.data,
                    Intrin.splat(eltType, numElts, y));
    return result;
  }

  /* SCALAR >= VECTOR */
  inline operator>=(x: ?scalarType, y: vector(?eltType, ?numElts)): y.type
    where isCoercible(scalarType, eltType) {
    var result: y.type;
    result.data = Intrin.cmpGe(eltType, numElts,
                    Intrin.splat(eltType, numElts, x), y.data);
    return result;
  }
}
